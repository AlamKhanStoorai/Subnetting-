#!/bin/bash

# Function to validate an IP address
validate_ip() {
    local ip=$1
    local valid_ip_regex="^([0-9]{1,3}\.){3}[0-9]{1,3}$"
    if [[ $ip =~ $valid_ip_regex ]]; then
        IFS='.' read -r -a octets <<< "$ip"
        for octet in "${octets[@]}"; do
            if (( octet < 0 || octet > 255 )); then
                echo "Invalid IP address: $ip"
                return 1
            fi
        done
        return 0
    else
        echo "Invalid IP address format: $ip"
        return 1
    fi
}

# Function to validate a subnet mask for all classes
validate_subnet() {
    local subnet=$1
    local valid_subnet_regex_A="^255\.([0-9]|[1-9][0-9])?\.[0-9]{1,3}\.[0-9]{1,3}$"
    local valid_subnet_regex_B="^255\.255\.([0-9]|[1-9][0-9])?\.[0-9]{1,3}$"
    local valid_subnet_regex_C="^255\.255\.255\.([0-9]|[1-9][0-9]|[1-2][0-9]{2}|3[0-1])?$"
    local valid_subnet_regex_D="^240\.0\.0\.0$"
    local valid_subnet_regex_E="^248\.0\.0\.0$"
    
    if [[ $subnet =~ $valid_subnet_regex_A ]] || 
       [[ $subnet =~ $valid_subnet_regex_B ]] || 
       [[ $subnet =~ $valid_subnet_regex_C ]] || 
       [[ $subnet =~ $valid_subnet_regex_D ]] || 
       [[ $subnet =~ $valid_subnet_regex_E ]]; then
        return 0
    else
        echo "Invalid subnet mask: $subnet"
        return 1
    fi
}

# Function to determine IP class
determine_ip_class() {
    local ip=$1
    IFS='.' read -r -a octets <<< "$ip"
    local first_octet=${octets[0]}
    if (( first_octet >= 1 && first_octet <= 126 )); then
        echo "A"
    elif (( first_octet >= 128 && first_octet <= 191 )); then
        echo "B"
    elif (( first_octet >= 192 && first_octet <= 223 )); then
        echo "C"
    elif (( first_octet >= 224 && first_octet <= 239 )); then
        echo "D"
    elif (( first_octet >= 240 && first_octet <= 255 )); then
        echo "E"
    else
        echo "Invalid"
    fi
}

int2bin() {
    declare -i num=$1
    binary=""
    for (( i=0; i<8; i++ )); do
        bit=$((num % 2))
        binary="$bit$binary"
        num=$((num / 2))
    done
    echo "$binary"
}

# Prompt user to enter IP address and subnet mask
read -p "Enter IP Address: " ip
read -p "Enter Subnet Mask: " subnetMask

# Validate the entered IP address and subnet mask
if ! validate_ip "$ip" || ! validate_subnet "$subnetMask"; then
    echo "Please enter valid IP address and subnet mask."
    exit 1
fi

# Determine the IP class of the entered IP address
ip_class=$(determine_ip_class "$ip")
subnet_class=$(determine_ip_class "$subnetMask")

# Ensure the subnet mask is valid for the IP class
if [[ $ip_class != "A" && $ip_class != "B" && $ip_class != "C" && $ip_class != "D" ]]; then
    echo "Subnet mask $subnetMask is invalid for IP class $ip_class"
    exit 1
fi

# Calculate network ID, broadcast IP, min IP, max IP, and wildcard mask
IFS='.' read -r -a ipArray <<< "$ip"
IFS='.' read -r -a subnetMaskArray <<< "$subnetMask"

networkID=""
wildcard=""
for (( i=0; i<4; i++ )); do
    networkID+=$(( ${ipArray[i]} & ${subnetMaskArray[i]} )).
    wildcard+=$((255 - ${subnetMaskArray[i]} )).
done
networkID=${networkID%?}
wildcard=${wildcard%?}

broadcastIP=""
for (( i=0; i<4; i++ )); do
    broadcastIP+=$(( ${ipArray[i]} | (255 - ${subnetMaskArray[i]}) )).
done
broadcastIP=${broadcastIP%?}

minIP=""
maxIP=""
for (( i=0; i<4; i++ )); do
    minIP+=${networkIDArray[i]}
    maxIP+=${broadcastIPArray[i]}
    if (( i != 3 )); then
        minIP+="."
        maxIP+="."
    fi
done

# Output the calculated values
echo "IP Class: $ip_class"
echo "Network ID: $networkID"
echo "Broadcast IP: $broadcastIP"
echo "Min IP: $minIP"
echo "Max IP: $maxIP"
echo "Wildcard Mask: $wildcard"
